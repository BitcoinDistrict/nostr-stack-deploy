# Reference vhost; runtime file is generated by scripts/deploy.sh using BLOSSOM_DOMAIN

map $http_cf_connecting_ip $client_ip {
    default $http_cf_connecting_ip;
    ''      $remote_addr;
}

upstream blossom_upstream { server 127.0.0.1:3300; }
upstream blossom_auth { server 127.0.0.1:3310; }

server {
    listen 80;
    server_name BLOSSOM_DOMAIN_PLACEHOLDER;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name BLOSSOM_DOMAIN_PLACEHOLDER;

    ssl_certificate /etc/letsencrypt/live/BLOSSOM_DOMAIN_PLACEHOLDER/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/BLOSSOM_DOMAIN_PLACEHOLDER/privkey.pem;

    # Public read endpoints (no gate)
    location / {
        proxy_pass http://blossom_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $client_ip;
        proxy_set_header X-Forwarded-For $client_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Ensure only one set of CORS headers (hide any from upstream)
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Credentials;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Expose-Headers;
        # CORS for public endpoints
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-NIP05, Accept, Origin" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Expose-Headers "Location, Content-Location, ETag" always;
        add_header Vary "Origin" always;
    }

    # Upload endpoints (example paths; deploy.sh will apply auth_request selectively)
    location /upload {
        # Handle CORS preflight without auth
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-NIP05, Accept, Origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age 86400 always;
            add_header Access-Control-Expose-Headers "Location, Content-Location, ETag" always;
            add_header Vary "Origin" always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        auth_request /__auth;
        proxy_pass http://blossom_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $client_ip;
        proxy_set_header X-Forwarded-For $client_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
        client_max_body_size 16m;
        # Ensure only one set of CORS headers (hide any from upstream)
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Credentials;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Expose-Headers;
        # CORS headers on actual requests
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-NIP05, Accept, Origin" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Expose-Headers "Location, Content-Location, ETag" always;
        add_header Vary "Origin" always;
    }

    # Internal subrequest for auth
    location = /__auth {
        internal;
        proxy_pass http://blossom_auth/auth;
        proxy_set_header X-NIP05 $http_x_nip05;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Original-Host $host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Original-Scheme $scheme;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }
}


