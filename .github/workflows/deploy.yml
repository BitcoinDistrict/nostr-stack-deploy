name: Deploy Strfry

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts

          # Write deploy key robustly (handles raw, escaped-\n, or base64-encoded secrets)
          SECRET="${{ secrets.DEPLOY_SSH_KEY }}"
          KEY_PATH=~/.ssh/id_ed25519
          TMP_KEY=~/.ssh/id_ed25519.raw

          # Attempt 1: raw write (strip CR)
          printf "%s" "$SECRET" > "$TMP_KEY"
          tr -d '\r' < "$TMP_KEY" > "$KEY_PATH"
          chmod 600 "$KEY_PATH"
          if ssh-keygen -y -f "$KEY_PATH" >/dev/null 2>&1; then
            echo "SSH key parsed (raw)"
          else
            # Attempt 2: interpret literal \n sequences as newlines
            if command -v perl >/dev/null 2>&1; then
              perl -0777 -pe 's/\r//g; s/\\n/\n/g' "$TMP_KEY" > "$KEY_PATH"
            else
              # Fallback with sed may not handle multi-line reliably in some shells
              sed 's/\\r//g' "$TMP_KEY" | awk '{gsub(/\\n/,"\n"); printf "%s", $0}' > "$KEY_PATH"
            fi
            chmod 600 "$KEY_PATH"
            if ssh-keygen -y -f "$KEY_PATH" >/dev/null 2>&1; then
              echo "SSH key parsed (escaped newlines)"
            else
              # Attempt 3: base64 decode
              if printf "%s" "$SECRET" | base64 -d > "$KEY_PATH" 2>/dev/null; then
                chmod 600 "$KEY_PATH"
                if ssh-keygen -y -f "$KEY_PATH" >/dev/null 2>&1; then
                  echo "SSH key parsed (base64)"
                else
                  echo "Failed to parse DEPLOY_SSH_KEY (base64 decoded)." >&2
                  exit 1
                fi
              else
                echo "Failed to parse DEPLOY_SSH_KEY (raw/escaped/base64)." >&2
                exit 1
              fi
            fi
          fi
          rm -f "$TMP_KEY"

      - name: Connectivity diagnostics
        run: |
          echo "Host: ${{ secrets.DEPLOY_HOST }}"
          getent ahostsv4 ${{ secrets.DEPLOY_HOST }} || true
          which nc >/dev/null 2>&1 && nc -vz -4 ${{ secrets.DEPLOY_HOST }} 22 || true
          ssh -4 -i ~/.ssh/id_ed25519 -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'echo SSH_OK' || true
          echo "Derived deploy key public (for comparison with authorized_keys):"
          ssh-keygen -y -f ~/.ssh/id_ed25519 | sed 's/^/  /'

      - name: Sync repo to server
        run: |
          rsync -az -e "ssh -4 -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=accept-new -o AddressFamily=inet" \
            --delete \
            --exclude='.git' \
            --exclude='strfry-db' \
            --exclude='strfry/strfry' \
            --exclude='strfry/build/' \
            ./ \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/nostr-stack-deploy

      - name: Run deploy script on server
        run: |
          ssh -4 -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=accept-new -o AddressFamily=inet ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "\
            DOMAIN=${{ secrets.RELAY_DOMAIN }} \\
            CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }} \\
            DASHBOARD_ENABLED=${{ vars.DASHBOARD_ENABLED }} \\
            DASHBOARD_DOMAIN=${{ secrets.DASHBOARD_DOMAIN }} \\
            CLOUDFLARE_ENABLED=${{ vars.CLOUDFLARE_ENABLED }} \\
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \\
            bash ~/nostr-stack-deploy/scripts/deploy.sh"

      - name: Post-deploy smoke test
        run: |
          ssh -4 -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=accept-new -o AddressFamily=inet ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            set -euo pipefail
            STRFRY_BIN=~/nostr-stack-deploy/strfry/strfry
            CONFIG_PATH=~/\.strfry/strfry.conf

            if [ ! -x \$STRFRY_BIN ]; then
              echo '❌ strfry binary missing or not executable'
              exit 1
            fi

            \$STRFRY_BIN --config \$CONFIG_PATH --version || \$STRFRY_BIN --config \$CONFIG_PATH --help
            echo '✅ strfry deployed and running with runtime config'
          "
